//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Snake_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Snake_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Snake_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Snake_Actions"",
    ""maps"": [
        {
            ""name"": ""Snake_Map"",
            ""id"": ""1dfe9906-9bcf-4c3a-bdd2-a03908aaeafc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""63c2c9d5-0076-4b65-b74a-b3bab491b0f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca978f56-1e62-46a7-9d5f-83fadd1dfc33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d56fe1e0-13c6-4bee-9cb6-8571e9fb92e2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""227a4b23-7818-4e0a-88bc-2e0aece4b76a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e5d66f2-8630-49ed-ba21-c212988a05d5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Snake_Map
        m_Snake_Map = asset.FindActionMap("Snake_Map", throwIfNotFound: true);
        m_Snake_Map_Movement = m_Snake_Map.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Snake_Map
    private readonly InputActionMap m_Snake_Map;
    private List<ISnake_MapActions> m_Snake_MapActionsCallbackInterfaces = new List<ISnake_MapActions>();
    private readonly InputAction m_Snake_Map_Movement;
    public struct Snake_MapActions
    {
        private @Snake_Actions m_Wrapper;
        public Snake_MapActions(@Snake_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Snake_Map_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Snake_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Snake_MapActions set) { return set.Get(); }
        public void AddCallbacks(ISnake_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Snake_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Snake_MapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(ISnake_MapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(ISnake_MapActions instance)
        {
            if (m_Wrapper.m_Snake_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISnake_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Snake_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Snake_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Snake_MapActions @Snake_Map => new Snake_MapActions(this);
    public interface ISnake_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
